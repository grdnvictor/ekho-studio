// backend/src/agents/audio/audio-agent.ts

import { ChatOpenAI } from "@langchain/openai";
import { MemorySaver } from "@langchain/langgraph";
import { SystemMessage, HumanMessage, AIMessage } from "@langchain/core/messages";
import { audioGenerationTool } from "./tools/audio-generation";
import { recommendVoice } from "../../services/audio/VoiceGuide";

console.log("üöÄ Initialisation de l'agent audio intelligent...");

// URL de LM Studio depuis la variable d'environnement
const LM_STUDIO_URL = process.env.LM_STUDIO_URL || 'http://localhost:1234/v1';
console.log("üåç URL LM Studio:", LM_STUDIO_URL);

const agentModel = new ChatOpenAI({
  temperature: 0.7, // Plus cr√©atif pour des r√©ponses naturelles
  model: "local-model",
  apiKey: "lm-studio",
  configuration: {
    baseURL: LM_STUDIO_URL
  }
});

// Ajouter les outils √† l'agent
const agentWithTools = agentModel.bindTools([audioGenerationTool]);

// Interface pour les donn√©es collect√©es de mani√®re flexible
interface CollectedData {
  projectType?: string;
  textContent?: string;
  targetAudience?: string;
  voiceGender?: string;
  emotionStyle?: string;
  duration?: number;
  context?: string;
  isReadyToGenerate?: boolean;
  conversationContext?: string[];
}

// Interface pour la r√©ponse de l'agent
interface AgentResponse {
  messages: AIMessage[];
  conversationState: {
    phase: string;
    step: number;
  };
  historyLength: number;
  audioGenerated: boolean;
  audioUrl?: string;
  collectedInfo?: string[];
  sessionData?: CollectedData;
}

// Stockage en m√©moire des sessions avec contexte conversationnel
const sessionStore = new Map<string, CollectedData>();
const conversationHistory = new Map<string, string[]>();

// Prompts optimis√©s pour une conversation naturelle
const CONVERSATION_PROMPTS = {
  welcome: [
    "üéôÔ∏è Salut ! Je suis ton assistant audio d'Ekho Studio. Dis-moi, quel type de contenu audio tu veux cr√©er aujourd'hui ?",
    "üéµ Bienvenue sur Ekho Studio ! Je suis l√† pour t'aider √† cr√©er l'audio parfait. Qu'est-ce que tu as en t√™te ?",
    "üëã Hello ! Pr√™t(e) √† cr√©er quelque chose d'incroyable ? Raconte-moi ton projet audio !",
  ],

  clarification: {
    text: [
      "Super ! Et quel est le texte que tu veux transformer en audio ?",
      "G√©nial ! Maintenant, partage-moi le texte que tu veux vocaliser.",
      "Parfait ! Quel message veux-tu faire passer ?"
    ],
    audience: [
      "C'est not√© ! Pour qui est destin√© cet audio ?",
      "Excellent choix ! Qui va √©couter ton audio ?",
      "Top ! √Ä quel public s'adresse ton message ?"
    ],
    voice: [
      "Compris ! Quel type de voix pr√©f√®res-tu ?",
      "D'accord ! Tu pr√©f√®res une voix masculine, f√©minine, ou peu importe ?",
      "Ok ! As-tu une pr√©f√©rence pour le type de voix ?"
    ],
    style: [
      "Presque fini ! Quel style veux-tu donner √† ton audio ?",
      "Derni√®re touche : quelle ambiance souhaites-tu ?",
      "Et pour finir, quel ton veux-tu adopter ?"
    ]
  },

  encouragement: [
    "C'est un super projet !",
    "J'adore ton id√©e !",
    "√áa va √™tre g√©nial !",
    "Excellent choix !",
    "Tu as bon go√ªt !",
    "C'est exactement ce qu'il faut !",
    "Wow, j'ai h√¢te d'entendre le r√©sultat !"
  ],

  readyToGenerate: [
    "üöÄ Parfait ! J'ai tout ce qu'il me faut. On lance la cr√©ation de ton audio ?",
    "‚ú® Super ! Tout est pr√™t. Je peux g√©n√©rer ton audio maintenant ?",
    "üéØ Excellent ! J'ai toutes les infos. On y va ?"
  ]
};

// Analyser intelligemment le message utilisateur
function analyzeUserMessage(message: string, sessionData: CollectedData): {
  detectedInfo: Partial<CollectedData>;
  confidence: number;
} {
  const lowerMessage = message.toLowerCase();
  const detectedInfo: Partial<CollectedData> = {};
  let confidence = 0;

  // D√©tection du type de projet
  const projectKeywords = {
    'publicit√©': ['pub', 'publicit', 'spot', 'annonce', 'promo'],
    'podcast': ['podcast', '√©mission', '√©pisode'],
    'formation': ['formation', 'cours', 'tutoriel', 'e-learning', 'apprendre'],
    'narration': ['histoire', 'conte', 'r√©cit', 'narrat'],
    'pr√©sentation': ['pr√©sentation', 'pitch', 'd√©mo'],
    'livre audio': ['livre', 'audiobook', 'lecture'],
    'm√©ditation': ['m√©ditation', 'relaxation', 'zen', 'calme']
  };

  for (const [type, keywords] of Object.entries(projectKeywords)) {
    if (keywords.some(keyword => lowerMessage.includes(keyword))) {
      detectedInfo.projectType = type;
      confidence += 0.2;
      break;
    }
  }

  // D√©tection du public cible
  const audienceKeywords = {
    'enfants': ['enfant', 'jeune', 'kid', '√©cole', 'maternelle'],
    'adolescents': ['ado', 'lyc√©e', 'jeune', 'teen'],
    'adultes': ['adulte', 'professionnel', 'entreprise', 'soci√©t√©'],
    'seniors': ['senior', '√¢g√©', 'retrait√©'],
    'grand public': ['tout le monde', 'g√©n√©ral', 'large', 'tous']
  };

  for (const [audience, keywords] of Object.entries(audienceKeywords)) {
    if (keywords.some(keyword => lowerMessage.includes(keyword))) {
      detectedInfo.targetAudience = audience;
      confidence += 0.2;
      break;
    }
  }

  // D√©tection du genre de voix
  if (lowerMessage.includes('masculin') || lowerMessage.includes('homme')) {
    detectedInfo.voiceGender = 'masculine';
    confidence += 0.15;
  } else if (lowerMessage.includes('f√©minin') || lowerMessage.includes('femme')) {
    detectedInfo.voiceGender = 'feminine';
    confidence += 0.15;
  }

  // D√©tection du style/√©motion
  const styleKeywords = {
    'professionnel': ['professionnel', 's√©rieux', 'formel', 'corporate'],
    'chaleureux': ['chaleureux', 'amical', 'sympathique', 'accueillant'],
    'dynamique': ['dynamique', '√©nergique', 'enjou√©', 'motivant', 'enthousiaste'],
    'calme': ['calme', 'pos√©', 'tranquille', 'apaisant', 'doux'],
    'dramatique': ['dramatique', 'intense', 'captivant', 'suspense']
  };

  for (const [style, keywords] of Object.entries(styleKeywords)) {
    if (keywords.some(keyword => lowerMessage.includes(keyword))) {
      detectedInfo.emotionStyle = style;
      confidence += 0.15;
      break;
    }
  }

  // D√©tection de texte long (probable contenu √† vocaliser)
  if (message.length > 100 && !message.includes('?')) {
    detectedInfo.textContent = message;
    confidence += 0.3;
  }

  return { detectedInfo, confidence };
}

// D√©terminer ce qui manque pour g√©n√©rer
function getMissingInfo(sessionData: CollectedData): string[] {
  const missing: string[] = [];

  if (!sessionData.textContent) {
    missing.push('Le texte √† vocaliser');
  }

  // Les autres infos sont optionnelles mais am√©liorent le r√©sultat
  if (!sessionData.projectType) {
    missing.push('Le type de projet (optionnel)');
  }
  if (!sessionData.targetAudience) {
    missing.push('Le public cible (optionnel)');
  }

  return missing;
}

// Choisir une r√©ponse appropri√©e
function getRandomResponse(responses: string[]): string {
  return responses[Math.floor(Math.random() * responses.length)];
}

export const audioAgent = {
  async invoke(input: any, config: any): Promise<AgentResponse> {
    console.log("ü§ñ Agent intelligent appel√©");

    const threadId: string = config.configurable?.thread_id;
    if (!threadId) {
      throw new Error("Thread ID manquant");
    }

    // R√©cup√©rer ou initialiser les donn√©es de session
    let sessionData: CollectedData = sessionStore.get(threadId) || {};
    let history: string[] = conversationHistory.get(threadId) || [];

    // Extraire le message utilisateur
    const userMessage = input.messages?.[input.messages.length - 1];
    const userText: string = userMessage?.content || '';

    console.log("üìä √âtat session:", {
      hasText: !!sessionData.textContent,
      hasProjectType: !!sessionData.projectType,
      userMessage: userText.slice(0, 50)
    });

    try {
      // Si c'est le premier message
      if (history.length === 0) {
        const welcomeMessage = new AIMessage(getRandomResponse(CONVERSATION_PROMPTS.welcome));
        history.push(`User: ${userText}`);
        history.push(`Assistant: ${welcomeMessage.content}`);
        conversationHistory.set(threadId, history);

        return {
          messages: [welcomeMessage],
          conversationState: { phase: 'discovery', step: 1 },
          historyLength: 1,
          audioGenerated: false
        };
      }

      // Analyser le message utilisateur
      const { detectedInfo, confidence } = analyzeUserMessage(userText, sessionData);

      // Mettre √† jour les donn√©es de session avec les infos d√©tect√©es
      sessionData = { ...sessionData, ...detectedInfo };
      sessionStore.set(threadId, sessionData);

      // Ajouter au contexte conversationnel
      history.push(`User: ${userText}`);

      // Si on a le texte principal, on peut g√©n√©rer
      if (sessionData.textContent && (userText.toLowerCase().includes('oui') ||
        userText.toLowerCase().includes('go') ||
        userText.toLowerCase().includes('lance') ||
        userText.toLowerCase().includes('g√©n√®re'))) {
        console.log("üéµ G√©n√©ration demand√©e");
        return await this.generateAudio(sessionData, threadId);
      }

      // D√©terminer la prochaine question pertinente
      let response: string;
      let phase: string = 'clarification';

      if (!sessionData.textContent) {
        // Si on a d√©tect√© du texte dans ce message
        if (detectedInfo.textContent) {
          response = `${getRandomResponse(CONVERSATION_PROMPTS.encouragement)} "${detectedInfo.textContent.slice(0, 50)}${detectedInfo.textContent.length > 50 ? '...' : ''}"`;

          // Demander des infos suppl√©mentaires optionnelles
          if (!sessionData.targetAudience) {
            response += `\n\n${getRandomResponse(CONVERSATION_PROMPTS.clarification.audience)}`;
          } else if (!sessionData.voiceGender) {
            response += `\n\n${getRandomResponse(CONVERSATION_PROMPTS.clarification.voice)}`;
          } else if (!sessionData.emotionStyle) {
            response += `\n\n${getRandomResponse(CONVERSATION_PROMPTS.clarification.style)}`;
          } else {
            // On a tout, proposer de g√©n√©rer
            response += `\n\n${getRandomResponse(CONVERSATION_PROMPTS.readyToGenerate)}`;
            phase = 'generation';
          }
        } else {
          // Demander le texte
          response = getRandomResponse(CONVERSATION_PROMPTS.clarification.text);
        }
      } else {
        // On a le texte, enrichir avec d'autres infos
        response = getRandomResponse(CONVERSATION_PROMPTS.encouragement);

        if (!sessionData.targetAudience && confidence < 0.5) {
          response += ` ${getRandomResponse(CONVERSATION_PROMPTS.clarification.audience)}`;
        } else if (!sessionData.voiceGender && confidence < 0.7) {
          response += ` ${getRandomResponse(CONVERSATION_PROMPTS.clarification.voice)}`;
        } else if (!sessionData.emotionStyle && confidence < 0.8) {
          response += ` ${getRandomResponse(CONVERSATION_PROMPTS.clarification.style)}`;
        } else {
          // Proposer de g√©n√©rer
          response = getRandomResponse(CONVERSATION_PROMPTS.readyToGenerate);
          phase = 'generation';
          sessionData.isReadyToGenerate = true;
        }
      }

      // Cr√©er le message de r√©ponse
      const responseMessage = new AIMessage(response);
      history.push(`Assistant: ${response}`);
      conversationHistory.set(threadId, history);

      // Collecter les infos pour l'affichage
      const collectedInfo: string[] = [];
      if (sessionData.projectType) collectedInfo.push(`Type: ${sessionData.projectType}`);
      if (sessionData.textContent) collectedInfo.push('Texte fourni ‚úì');
      if (sessionData.targetAudience) collectedInfo.push(`Public: ${sessionData.targetAudience}`);
      if (sessionData.voiceGender) collectedInfo.push(`Voix: ${sessionData.voiceGender}`);
      if (sessionData.emotionStyle) collectedInfo.push(`Style: ${sessionData.emotionStyle}`);

      return {
        messages: [responseMessage],
        conversationState: { phase, step: history.length },
        historyLength: history.length,
        audioGenerated: false,
        collectedInfo
      };

    } catch (error: unknown) {
      console.error("‚ùå Erreur dans l'agent:", error);
      const errorMessage = new AIMessage(
        "üòÖ Oups ! J'ai eu un petit souci. Peux-tu reformuler ta demande ?"
      );

      return {
        messages: [errorMessage],
        conversationState: { phase: 'error', step: history.length },
        historyLength: history.length,
        audioGenerated: false
      };
    }
  },

  async generateAudio(sessionData: CollectedData, threadId: string): Promise<AgentResponse> {
    console.log("üéµ G√©n√©ration audio avec donn√©es:", sessionData);

    try {
      if (!sessionData.textContent) {
        throw new Error("Contenu textuel manquant");
      }

      // Choisir la voix optimale intelligemment
      const voiceName: string = recommendVoice({
        projectType: sessionData.projectType,
        targetAudience: sessionData.targetAudience,
        emotion: sessionData.emotionStyle,
        gender: sessionData.voiceGender
      });

      // Pr√©parer les param√®tres
      const generationParams = {
        text: sessionData.textContent,
        voiceName: voiceName,
        emotion: sessionData.emotionStyle || 'neutral',
        speed: 1.0,
        effects: []
      };

      console.log("üéØ Param√®tres g√©n√©ration:", generationParams);

      // G√©n√©rer l'audio
      const audioResult = await audioGenerationTool.invoke(generationParams);

      if (audioResult.success) {
        const funMessages = [
          "üéâ Tadaaa ! Ton audio est pr√™t ! J'esp√®re qu'il te plaira autant qu'√† moi !",
          "‚ú® Et voil√† ! J'ai mis tout mon c≈ìur dans cet audio. √âcoute-le vite !",
          "üöÄ Mission accomplie ! Ton audio est fin pr√™t. C'est du lourd !",
          "üéµ Boom ! Audio g√©n√©r√© avec succ√®s ! J'ai h√¢te que tu l'√©coutes !"
        ];

        const summaryMessage = new AIMessage(
          `${getRandomResponse(funMessages)}\n\n` +
          `üìã **Petit r√©cap de ton projet :**\n` +
          (sessionData.projectType ? `‚Ä¢ **Type :** ${sessionData.projectType}\n` : '') +
          (sessionData.targetAudience ? `‚Ä¢ **Public :** ${sessionData.targetAudience}\n` : '') +
          `‚Ä¢ **Voix :** ${this.getVoiceDisplayName(voiceName)}\n` +
          (sessionData.emotionStyle ? `‚Ä¢ **Style :** ${this.getStyleDisplayName(sessionData.emotionStyle)}\n` : '') +
          `‚Ä¢ **Dur√©e :** ~${('duration' in audioResult ? audioResult.duration : 0)}s\n\n` +
          `üéß Tu peux maintenant √©couter et t√©l√©charger ton audio ci-dessus.\n\n` +
          `üí° **Envie d'autre chose ?** Dis-moi "nouveau" pour cr√©er un autre audio ou explique-moi ce que tu veux modifier !`
        );

        // Reset pour un nouveau projet
        sessionStore.delete(threadId);
        conversationHistory.delete(threadId);

        return {
          messages: [summaryMessage],
          conversationState: { phase: 'complete', step: 6 },
          historyLength: 6,
          audioGenerated: true,
          audioUrl: ('url' in audioResult) ? audioResult.url : undefined,
          sessionData: sessionData
        };
      } else {
        throw new Error(('error' in audioResult ? audioResult.error : audioResult.message) || "√âchec de g√©n√©ration");
      }
    } catch (error: unknown) {
      console.error("‚ùå Erreur g√©n√©ration:", error);
      const errorMessage = new AIMessage(
        `üòî Oups, j'ai eu un probl√®me lors de la g√©n√©ration...\n${error instanceof Error ? error.message : 'Erreur inconnue'}\n\n` +
        `Pas de panique ! Tape "oui" pour r√©essayer ou "nouveau" pour recommencer avec un autre projet.`
      );

      return {
        messages: [errorMessage],
        conversationState: { phase: 'error', step: 5 },
        historyLength: 5,
        audioGenerated: false
      };
    }
  },

  getVoiceDisplayName(voiceName: string): string {
    const voiceDisplayNames: Record<string, string> = {
      'aoede': 'Aoede (voix f√©minine chaleureuse)',
      'achernar': 'Achernar (voix masculine forte)',
      'callirrhoe': 'Callirrhoe (voix jeune et dynamique)',
      'charon': 'Charon (voix grave et myst√©rieuse)',
      'despina': 'Despina (voix moderne et claire)',
      'orus': 'Orus (voix masculine professionnelle)',
      'pulcherrima': 'Pulcherrima (voix √©l√©gante)',
      'vindemiatrix': 'Vindemiatrix (voix expressive)',
      'zephyr': 'Zephyr (voix apaisante)',
      'sadachbia': 'Sadachbia (voix traditionnelle)',
      'fenrir': 'Fenrir (voix dramatique)'
    };

    return voiceDisplayNames[voiceName] || voiceName;
  },

  getStyleDisplayName(style: string): string {
    const styleNames: Record<string, string> = {
      'professional': 'Professionnel',
      'warm': 'Chaleureux',
      'energetic': 'Dynamique',
      'calm': 'Calme',
      'dramatic': 'Dramatique',
      'neutral': 'Naturel'
    };

    return styleNames[style] || style;
  },

  // M√©thode pour vider l'historique d'une session
  clearHistory(threadId: string): void {
    sessionStore.delete(threadId);
    conversationHistory.delete(threadId);
    console.log("üóëÔ∏è Session supprim√©e:", threadId);
  }
};

console.log("‚úÖ Agent audio intelligent cr√©√©");