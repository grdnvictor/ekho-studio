// backend/src/agents/audio/tools/audio-generation.ts
import { tool } from "@langchain/core/tools";
import { AudioGenerationSchema } from "../../../types/audio";
import { AudioService } from "../../../services/audio";

console.log("üîß Initialisation de audioGenerationTool...");

const audioService = new AudioService();
console.log("‚úÖ AudioService cr√©√©");

export const audioGenerationTool = tool(
  async ({ text, voiceName, emotion, speed, effects }) => {
    console.log("üéµ audioGenerationTool appel√© avec:", {
      text: text?.slice(0, 50),
      voiceName,
      emotion,
      speed,
      effects
    });

    try {
      console.log("üìû Appel de generateAudio...");
      const result = await audioService.generateAudio({
        text,
        voiceName,
        emotion,
        speed,
        effects
      });

      console.log("‚úÖ Audio g√©n√©r√©:", result);

      const response = {
        url: result.url,
        duration: result.duration,
        quality: result.quality,
        fileSize: result.fileSize,
        downloadUrl: result.downloadUrl,
        metadata: result.metadata
      };

      console.log("üì§ Retour de audioGenerationTool:", response);
      return response;
    } catch (error) {
      console.error("‚ùå Erreur dans audioGenerationTool:", error);
      console.error("Stack:", error.stack);
      throw new Error(`√âchec de la g√©n√©ration audio: ${error.message}`);
    }
  },
  {
    name: "audio_generation",
    description: "G√©n√®re un fichier audio professionnel √† partir du texte avec la voix et les param√®tres sp√©cifi√©s",
    schema: AudioGenerationSchema,
  }
);

console.log("‚úÖ audioGenerationTool configur√©:", audioGenerationTool.name);