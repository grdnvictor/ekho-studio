// backend/src/agents/audio/tools/audio-generation.ts
import { tool } from "@langchain/core/tools";
import { AudioGenerationSchema } from "@/types/audio.ts";
import { AudioService } from "@/services";

console.log("üîß Initialisation de audioGenerationTool...");

const audioService = new AudioService();
console.log("‚úÖ AudioService cr√©√©");

export const audioGenerationTool = tool(
  async ({ text, voiceName, emotion, speed, effects }) => {
    console.log("üéµ audioGenerationTool appel√© avec:", {
      text: text?.slice(0, 50),
      voiceName,
      emotion,
      speed,
      effects
    });

    try {
      // Validation des param√®tres d'entr√©e
      if (!text || text.trim().length === 0) {
        throw new Error("Le texte √† vocaliser ne peut pas √™tre vide");
      }

      if (text.length > 5000) {
        throw new Error("Le texte est trop long (maximum 5000 caract√®res)");
      }

      // Nettoyer et pr√©parer le texte
      const cleanedText = text.trim();

      // Valider et normaliser les param√®tres
      const normalizedParams = {
        text: cleanedText,
        voiceName: voiceName || "aoede", // Voix par d√©faut fiable
        emotion: emotion || "neutral",
        speed: Math.max(0.5, Math.min(2.0, speed || 1.0)), // Limiter entre 0.5 et 2.0
        effects: effects || []
      };

      console.log("üìû Appel de generateAudio avec param√®tres normalis√©s:", normalizedParams);

      const startTime = Date.now();
      const result = await audioService.generateAudio(normalizedParams);
      const processingTime = Date.now() - startTime;

      console.log("‚úÖ Audio g√©n√©r√© avec succ√®s:", {
        url: result.url,
        duration: result.duration,
        processingTime: `${processingTime}ms`
      });

      // Construire la r√©ponse de succ√®s enrichie
      const response = {
        success: true,
        url: result.url,
        duration: result.duration,
        quality: result.quality,
        fileSize: result.fileSize,
        downloadUrl: result.downloadUrl,
        metadata: {
          ...result.metadata,
          processingTime,
          textLength: cleanedText.length,
          wordCount: cleanedText.split(/\s+/).length
        },
        message: `üéâ Audio g√©n√©r√© avec succ√®s ! Dur√©e: ${result.duration}s. Temps de traitement: ${processingTime}ms.`,
        generationDetails: {
          voiceUsed: normalizedParams.voiceName,
          emotionApplied: normalizedParams.emotion,
          speedApplied: normalizedParams.speed,
          textProcessed: cleanedText.length,
          estimatedReadingTime: Math.round(cleanedText.split(/\s+/).length / (150 * normalizedParams.speed) * 60)
        }
      };

      console.log("üì§ Retour de audioGenerationTool:", {
        success: response.success,
        url: response.url,
        duration: response.duration
      });

      return response;
    } catch (error) {
      console.error("‚ùå Erreur dans audioGenerationTool:", error);
      console.error("Stack trace:", error.stack);

      // Analyser le type d'erreur pour donner un message plus pr√©cis
      let errorMessage = "√âchec de la g√©n√©ration audio";
      let userFriendlyMessage = "‚ùå D√©sol√©, une erreur s'est produite lors de la g√©n√©ration.";

      if (error.message.includes("GEMINI_API_KEY")) {
        errorMessage = "Configuration API manquante";
        userFriendlyMessage = "‚ùå Probl√®me de configuration du service. Veuillez contacter l'administrateur.";
      } else if (error.message.includes("rate limit") || error.message.includes("429")) {
        errorMessage = "Limite de d√©bit atteinte";
        userFriendlyMessage = "‚è±Ô∏è Service temporairement surcharg√©. Veuillez r√©essayer dans quelques instants.";
      } else if (error.message.includes("network") || error.message.includes("timeout")) {
        errorMessage = "Probl√®me de connexion";
        userFriendlyMessage = "üåê Probl√®me de connexion r√©seau. Veuillez v√©rifier votre connexion et r√©essayer.";
      } else if (error.message.includes("trop long")) {
        errorMessage = "Texte trop long";
        userFriendlyMessage = "üìù Le texte est trop long. Veuillez le raccourcir (maximum 5000 caract√®res).";
      } else if (error.message.includes("vide")) {
        errorMessage = "Texte manquant";
        userFriendlyMessage = "üìù Veuillez fournir un texte √† vocaliser.";
      }

      const errorResponse = {
        success: false,
        error: `${errorMessage}: ${error.message}`,
        message: `${userFriendlyMessage} Pouvez-vous r√©essayer ?`,
        details: {
          errorType: error.name || "UnknownError",
          timestamp: new Date().toISOString(),
          inputText: text?.slice(0, 100) || "N/A"
        },
        suggestions: [
          "V√©rifiez que votre texte n'est pas trop long",
          "Essayez de reformuler votre demande",
          "Contactez le support si le probl√®me persiste"
        ]
      };

      console.log("üì§ Retour d'erreur de audioGenerationTool:", errorResponse);
      return errorResponse;
    }
  },
  {
    name: "audio_generation",
    description: "G√©n√®re un fichier audio professionnel √† partir du texte avec la voix et les param√®tres sp√©cifi√©s. Retourne l'URL du fichier audio g√©n√©r√©.",
    schema: AudioGenerationSchema,
  }
);

console.log("‚úÖ audioGenerationTool configur√©:", audioGenerationTool.name);